How to run SQLite
>>> python3
>>> from flaskblog import db 
>>> db.create_all() #Create DB
>>> from flaskblog import User, Post #Import tables
>>> user_1 = User(username='Bob', email='Bob@test.com', password='123') #Create User
>>> user_2 = User(username='Jack', email="Jack@test.com', password='123') #Create User
>>> db.session.add(user_1) #Add User
>>> db.session.add(user_2) #Add User
>>> db.session.commit() #Commit changes to DB
>>> User.query.all() #Query all data
[User('Bob', 'Bob@test.com','default.jpg'), User('Jack', 'Jack@test.com','default.jpg')]
>>> User.query.first() #Query first data
User('Bob', 'Bob@test.com','default.jpg')
>>> User.query.filter_by(username='Bob').all() #Filtered query
[User('Bob', 'Bob@test.com','default.jpg')] 
>>> user = User.query.first() #Save to a variable
>>> user.id #Return variable
1
>>> User.query.get(1) #Get user of id 1
User('Bob', 'Bob@test.com','default.jpg')
>>> post_1 = Post(title='Blog 1', content='First Post hello', user_id=user.id)
>>> post_2 = Post(title='Blog 2', content='Second Post hello', user_id=user.id)
>>> db.session.add(post_1)
>>> db.session.add(post_2)
>>> db.session.commit()
>>> for post in user.posts: #loop and print posts
...     print(post.title)
... 
Blog 1
Blog 2
>>> post = Post.query.first()
>>> post
Post('Blog 1', '2022-07-24 08:33:00.669205')
>>> post.user_id
1
>>> post.author
User('Bob', 'Bob@test.com','default.jpg')
>>> db.drop_all() #Clear all tables in DB
>>> db.create_all()

Ubuntu - to give user access to static folder
  sudo usermod -a -G your_user www-data

  sudo chown -R :www-data /path/to/your/static/folder

Run Pytest
python3 -m pytest -v

run this first to initialize DB

from flaskblog import create_app
app = create_app()
app.app_context().push()
from flaskblog import db
db.drop_all()
db.create_all()
exit()

How to deploy to a Linux Server.
Setup
1) Create server on linode
2) Copy ssh root@139.162.4.102 from linode and run on local terminal
3) Enter Yes and root password
4) Upgrade to latest version - apt update && apt upgrade
5) Change host name - hostnamectl set-hostname flask-server
6) nano /etc/hosts, then key in 139.162.4.102 flask-server
7) Add a limited user - adduser woontl
8) Add user to sudo group - adduser woontl sudo
9) Logout - exit
10) Log back in as user - ssh woontl@139.162.4.102

Setup SSH 
1) Setup SSH keybased authentication
  > make ssh directory - mkdir .ssh
2) Open SSH on local
  > ssh-keygen -b 4096
  > enter default file and overwrite
3) Copy SSH over to server - scp ~/.ssh/id_rsa.pub woontl@139.162.4.102:~/.ssh/authorized_keys
4) Give permission to use SSH
  > sudo chmod 700 ~/.ssh/
  > sudo chmod 600 ~/.ssh/*
5) sudo nano /etc/ssh/sshd_config
  > change permitrootlogin to no
  > uncomment passwordauthentication and set as no
6) sudo systemctl restart ssh

Setup firewall
1) sudo apt install ufw
2) sudo ufw default allow outgoing
3) sudo ufw default deny incoming
4) sudo ufw allow ssh
5) sudo ufw allow 5000
6) sudo ufw enable

Transfer Project over to server
1) On local - pip freeze > requirements.txt
2) scp -r /Users/tianli.woon/Documents/TL/Coding101/Project/Tuition_Site_2 woontl@139.162.4.102:~/
3) In server - sudo apt install python3-pip
4) sudo apt install python3.10-venv
5) python3 -m venv Tuition_Site_2/venv
6) cd Tuition_Site_2
7) source venv/bin/activate
8) pip install -r requirements.txt
9) sudo touch /etc/config.json
10) sudo nano /etc/config.json
  >Enter environ variables, secret key, sql DB URI, emaiil user, email password
11) sudo nano flaskblog/config.py
  > import json
  > with open('/etc/config.json') as config_file:
        config = json.load(config_file)
  > change os.environ.get to config.get
12) export FLASK_APP=run.py
13) flask run --host=0.0.0.0

NGINX
1) in venv - sudo apt install nginx
2) pip install gunicorn
3) sudo rm /etc/nginx/sites-enabled/default
4) sudo nano /etc/nginx/sites-enabled/flaskblog
  server { 
        listen 80;
        server_name 139.162.4.102;

        location /static {
                alias /home/woontl/Tuition_Site_2/flaskblog/static;
        }

        location / {
                proxy_pass http://localhost:8000;
                include /etc/nginx/proxy_params;
                proxy_redirect off;
        }
  }
5) sudo ufw allow http/tcp
6) sudo ufw delete allow 5000
7) sudo ufw enable
8) sudo systemctl restart nginx
9) gunicorn -w 3 run:app
10) sudo apt install supervisor
11) sudo nano /etc/supervisor/conf.d/flaskblog.conf
  >[program:flaskblog]
    directory=/home/woontl/Tuition_Site_2
    command=/home/woontl/Tuition_Site_2/venv/bin/gunicorn -w 3 run:app
    user=woontl
    autostart=true
    autorestart=true
    stopasgroup=true
    killasgroup=true
    stderr_logfile=/var/log/flaskblog/flaskblog.err.log
    stdout_logfile=/var/log/flaskblog/flaskblog.out.log
12) sudo mkdir -p /var/log/flaskblog
13) sudo touch /var/log/flaskblog/flaskblog.err.log
14) sudo touch /var/log/flaskblog/flaskblog.out.log
15) sudo supervisorctl reload
